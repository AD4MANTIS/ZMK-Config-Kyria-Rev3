/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * German QWERTZ Layout
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

// DIFFICULTY_THRESHOLD specifies your level of expertise with this keymap.
// It's meant to help newcomers gradually work their way up to mastery.
// You can disable this setting by omitting it or assigning a `0` zero.
#define DIFFICULTY_THRESHOLD 200 // 500ms: easy -> 100ms: hard

#if defined(DIFFICULTY_THRESHOLD) && DIFFICULTY_THRESHOLD > 0

    #define HOMEY_HOLDING_TIME DIFFICULTY_THRESHOLD

    #define INDEX_HOLDING_TIME DIFFICULTY_THRESHOLD

    #define PINKEY_DIFFICULTY_OFFSET (DIFFICULTY_THRESHOLD / 8)

    #define TAP_DANCE_TAPPING_TIME (DIFFICULTY_THRESHOLD - 25)

#else

    #define PINKEY_DIFFICULTY_OFFSET 0

    #define TAP_DANCE_TAPPING_TIME 200

#endif

/ {
    macros {
        GER_CARET: GER_CARET {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            
            bindings
                = <&kp GRAVE>
                , <&kp SPACE>;
        };

        GER_GRAVE: GER_GRAVE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            
            bindings
                = <&kp LS(EQUAL)>
                , <&kp SPACE>;
        };
    };
};

// Home row mods
/ {
    behaviors {
        //////////////////////////////////////////////////////////////////////////
        //
        // Miryoku layers and home row mods (ported from my QMK endgame)
        // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
        // - https://github.com/urob/zmk-config#timeless-homerow-mods
        //
        //////////////////////////////////////////////////////////////////////////

        // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the pinky, ring, and middle fingers (which are assigned to Super,
        // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
        #define HOMEY_HOLDING_TYPE "tap-preferred"

        // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
        // home row mod keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
        #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER

        // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        #define HOMEY_STREAK_DECAY 250

        // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

        // Home row mods with per-finger configuration settings
        #define RING_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #define RING_HOLDING_TIME HOMEY_HOLDING_TIME
        #define RING_STREAK_DECAY HOMEY_STREAK_DECAY
        #define RING_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
        #define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
        #define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY

        //
        // key positions index for positional hold-tap
        //
        // |-----------------------------|-----------------------------|
        // | LEFT_HAND_KEYS              |             RIGHT_HAND_KEYS |
        // |    0  1  2  3  4  5         |         6  7  8  9 10 11    |
        // |    12 13 14 15 16 17        |        18 19 20 21 22 23    |
        // |    24 25 26 27 28 29  30 31 | 32 33  34 35 36 37 38 39    |
        // |              40 41 42 43 44 | 45 46 47 48 49              |
        // |-----------------------------|-----------------------------|
        //
        #define LEFT_HAND_KEYS    \
            0  1  2  3  4  5      \
            12 13 14 15 16 17     \
            24 25 26 27 28 29
        #define RIGHT_HAND_KEYS   \
                                         6  7  8  9 10 11 \
                                        18 19 20 21 22 23 \
                                        34 35 36 37 38 39
        #define THUMB_KEYS        \
                            30 31   32 33                 \
                   40 41 42 43 44   45 46 47 48 49

        left_ring: homey_left_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = RING_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RING_HOLDING_TIME>;
            quick-tap-ms = <RING_REPEAT_DECAY>;
            require-prior-idle-ms = <RING_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring: homey_right_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = RING_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RING_HOLDING_TIME>;
            quick-tap-ms = <RING_REPEAT_DECAY>;
            require-prior-idle-ms = <RING_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_middy: homey_left_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <MIDDY_HOLDING_TIME>;
            quick-tap-ms = <MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_middy: homey_right_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <MIDDY_HOLDING_TIME>;
            quick-tap-ms = <MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    behaviors {
        sk_shft: sticky_key_shift {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <TAP_DANCE_TAPPING_TIME>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------------------------------------------------------------
            // |  Tab  |  Q  |  W  |  E   |   R   |   T    |                                                          |        Z        |   U   |   I   |  O  |  Ö  |   Ü   |
            // |  ESC  |  A  |  S  |  D   |   F   |   G    |                                                          |        H        |   J   |   K   |  L  |  P  |   Ä   |
            // | LGUI  |  Y  |  X  |  C   |   V   |   B    |      DEL      |      |    |   Encoder    | LAYER 3 / DEL |        N        |   M   |   ,   |  .  |  ß  | RCTRL |
            //                     | LALT | LCTRL | LSHIFT | Layer 1 / RET | LGUI |    | LGUI / K_APP |     BSPC      | LAYER 2 / SPACE | RCTRL | LALT  |
            bindings = <
&kp TAB   &kp Q  &kp W              &kp F                &kp P      &kp V                                                           &kp Y        &kp L      &kp U                 &kp K               &kp SEMI   &kp LBKT
&kp ESC   &kp A  &left_ring LALT S  &left_middy LCTRL R  &kp T      &kp G                                                           &kp M        &kp N      &right_middy RCTRL E  &right_ring RALT I  &kp O      &kp SQT
&kp LGUI  &kp Z  &kp X              &kp C                &kp D      &kp B       &kp DEL    &none         &none           &lt 3 DEL  &kp J        &kp H      &kp COMMA             &kp DOT             &kp MINUS  &kp RCTRL
                                    &kp LALT             &kp LCTRL  &kp LSHIFT  &lt 1 RET  &kp LGUI      &mt LGUI K_APP  &kp BSPC   &lt 2 SPACE  &kp RCTRL  &kp LALT
            >;

            sensor-bindings =
                <&inc_dec_kp 0 0>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_Lower {
            // ---------------------------------------------------------------
            // |  | 1 | 2 | 3 | 4 | 5 |    |  F9  |  F10  | F11 | F12  |  |  |
            // |  | 6 | 7 | 8 | 9 | 0 |    | LEFT | RIGHT | UP  | DOWN |  |  |
            // |  |      F1 - F5      |    | BACK | HOME  | END | FWD  |  |  |
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                     &kp F9      &kp F10  &kp F11    &kp F12        &trans  &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0                                     &kp LEFT    &kp DOWN &kp UP     &kp RIGHT      &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &trans  &none      &none   &trans  &kp K_BACK  &kp END  &kp HOME   &kp K_FORWARD  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans      &trans   &trans
            >;
        };

        layer_Symbol {
            // ----------------------------------------------------
            // |  | * | : | ; | ! | ? |    | { | } | " | ' | ` |  |
            // |  | \ | / | + | - | = |    | ( | ) | < | > | _ |  |
            // |  | ~ | ^ | & | | | % |    | [ | ] | @ | # | $ |  |
            bindings = <
&none  &kp KP_MULTIPLY   &kp LS(DOT)   &kp LS(COMMA)  &kp LS(N1)      &kp LS(MINUS)                                     &kp LC(LA(N8))  &kp LC(LA(N9))  &kp LS(N2)  &kp LS(BSLH)  &GER_GRAVE    &none
&none  &kp LS(LC(N7))    &kp KP_SLASH  &kp RBKT       &kp FSLH        &kp LS(N0)                                        &kp LS(N8)      &kp LS(N9)      &kp LT      &kp GT        &kp LS(FSLH)  &none
&none  &kp LA(N)  &NON_US_BSLH  &kp LS(N6)     &kp LC(LA(N7))  &kp LS(N5)     &trans  &none      &none   &trans  &kp LC(LA(N5))  &kp LC(LA(N6))  &kp LA(L)   &kp BSLH      &kp LS(N4)    &none
                                       &trans         &trans          &trans         &trans  &trans     &trans  &trans  &trans          &trans          &trans
            >;
        };

        function_layer {
            // ------------------------------------------------------------------------------------------------------------------------------------
            // |BT_CLR|BTSEL0|BTSEL1|   BTSEL2   |BTSEL3|BTSEL4|                                         |RGB_TOG|RGB_BRI|RGB_SAI|RGB_HUI|RGB_SPI|RGB_EFF|
            // |      |      |C_PREV|C_PLAY_PAUSE|C_NEXT|      |                                         |       |RGB_BRD|RGB_SAD|RGB_HUD|RGB_SPD|RGB_EFR|
            // |      |      |      |            |      |      |      |      |      |      |      |      |       |       |       |       |       |       |
            //                      |            |      |      |      |      |      |      |      |      |       |       |       |
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4                                     &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF
&trans      &trans        &kp C_PREV    &kp C_PLAY_PAUSE &kp C_NEXT    &trans                                           &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR
&trans      &trans        &trans        &trans           &trans        &trans        &trans  &trans     &trans  &trans  &trans           &trans           &trans           &trans           &trans           &trans
                                        &trans           &trans        &trans        &trans  &trans     &trans  &trans  &trans           &trans           &trans
            >;
        };
    };
};
