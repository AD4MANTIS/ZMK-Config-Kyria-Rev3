/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * German QWERTZ Layout
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

// DIFFICULTY_THRESHOLD specifies your level of expertise with this keymap.
// It's meant to help newcomers gradually work their way up to mastery.
// You can disable this setting by omitting it or assigning a `0` zero.
#define DIFFICULTY_THRESHOLD 200 // 500ms: easy -> 100ms: hard

#if defined(DIFFICULTY_THRESHOLD) && DIFFICULTY_THRESHOLD > 0

    #define HOMEY_HOLDING_TIME DIFFICULTY_THRESHOLD

    #define INDEX_HOLDING_TIME DIFFICULTY_THRESHOLD

    #define PINKEY_DIFFICULTY_OFFSET (DIFFICULTY_THRESHOLD / 8)

    #define TAP_DANCE_TAPPING_TIME (DIFFICULTY_THRESHOLD - 25)

#else

    #define PINKEY_DIFFICULTY_OFFSET 0

    #define TAP_DANCE_TAPPING_TIME 200

#endif

/ {
    macros {
        GER_CARET: GER_CARET {
            label = "&GER_CARET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            
            bindings
                = <&kp GRAVE>
                , <&kp SPACE>;
        };

        GER_GRAVE: GER_GRAVE {
            label = "&GER_GRAVE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            
            
            bindings
                = <&kp LS(EQUAL)>
                , <&kp SPACE>;
        };
    };
};

// Home row mods
/ {
    behaviors {
        //////////////////////////////////////////////////////////////////////////
        //
        // Miryoku layers and home row mods (ported from my QMK endgame)
        // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
        // - https://github.com/urob/zmk-config#timeless-homerow-mods
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the pinky, ring, and middle fingers (which are assigned to Super,
        // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
        //
        #ifndef HOMEY_HOLDING_TYPE
        #define HOMEY_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
        // home row mod keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
        //
        #ifndef HOMEY_HOLDING_TIME
        #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
        #endif

        //
        // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef HOMEY_STREAK_DECAY
        #define HOMEY_STREAK_DECAY 250
        #endif

        //
        // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef HOMEY_REPEAT_DECAY
        #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // Home row mods with per-finger configuration settings
        //
        #ifndef RING_HOLDING_TYPE
        #define RING_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif
        #ifndef RING_HOLDING_TIME
        #define RING_HOLDING_TIME HOMEY_HOLDING_TIME
        #endif
        #ifndef RING_STREAK_DECAY
        #define RING_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif
        #ifndef RING_REPEAT_DECAY
        #define RING_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif
        #ifndef MIDDY_HOLDING_TYPE
        #define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif
        #ifndef MIDDY_HOLDING_TIME
        #define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
        #endif
        #ifndef MIDDY_STREAK_DECAY
        #define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif
        #ifndef MIDDY_REPEAT_DECAY
        #define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif

        //
        // key positions index for positional hold-tap
        //
        // |-----------------------------|-----------------------------|
        // | LEFT_HAND_KEYS              |             RIGHT_HAND_KEYS |
        // |    0  1  2  3  4  5         |         6  7  8  9 10 11    |
        // |    12 13 14 15 16 17        |        18 19 20 21 22 23    |
        // |    24 25 26 27 28 29  30 31 | 32 33  34 35 36 37 38 39    |
        // |              40 41 42 43 44 | 45 46 47 48 49              |
        // |-----------------------------|-----------------------------|
        //
        #define LEFT_HAND_KEYS    \
            0  1  2  3  4  5      \
            12 13 14 15 16 17     \
            24 25 26 27 28 29
        #define RIGHT_HAND_KEYS   \
                                         6  7  8  9 10 11 \
                                        18 19 20 21 22 23 \
                                        34 35 36 37 38 39
        #define THUMB_KEYS        \
                            30 31   32 33                 \
                   40 41 42 43 44   45 46 47 48 49

        left_ring: homey_left_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = RING_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RING_HOLDING_TIME>;
            quick-tap-ms = <RING_REPEAT_DECAY>;
            require-prior-idle-ms = <RING_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring: homey_right_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = RING_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RING_HOLDING_TIME>;
            quick-tap-ms = <RING_REPEAT_DECAY>;
            require-prior-idle-ms = <RING_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_middy: homey_left_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <MIDDY_HOLDING_TIME>;
            quick-tap-ms = <MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_middy: homey_right_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <MIDDY_HOLDING_TIME>;
            quick-tap-ms = <MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };
};

// Umlaute & sz
/ {
    behaviors {

        #define TAP_DANCE_TAPPING_TIME_O TAP_DANCE_TAPPING_TIME

        #define TAP_DANCE_TAPPING_TIME_A (TAP_DANCE_TAPPING_TIME + PINKEY_DIFFICULTY_OFFSET)

        #define TAP_DANCE_TAPPING_TIME_U TAP_DANCE_TAPPING_TIME

        #define TAP_DANCE_TAPPING_TIME_SZ TAP_DANCE_TAPPING_TIME

        o_oe: tap_dance_oe {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_TAPPING_TIME_O>;
            bindings = <&kp O>, <&kp SEMI>;
        };

        a_ae: tap_dance_ae {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_TAPPING_TIME_A>;
            bindings = <&kp A>, <&kp SQT>;
        };

        u_ue: tap_dance_ue {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_TAPPING_TIME_U>;
            bindings = <&kp U>, <&kp LBKT>;
        };

        z_sz: tap_dance_sz {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAP_DANCE_TAPPING_TIME_SZ>;
            bindings = <&kp Y>, <&kp MINUS>;
        };

        sk_shft: sticky_key_shift {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <(TAP_DANCE_TAPPING_TIME + PINKEY_DIFFICULTY_OFFSET)>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------------------------------------------------------------
            // |  Tab  |  Q  |  W  |  E  |   R   |  T     |                                            |        Y        |  U   |  I  |  O  |  Ö  |   Ü  |
            // |  ESC  |  A  |  S  |  D  |   F   |  G     |                                            |        H        |  J   |  K  |  L  |  P  |   Ä  |
            // | LGUI  |  Z  |  X  |  C  |   V   |  B     |      DEL      |      |    |      | LAYER 3 |        N        |  M   |  ,  |  .  |  ;  | CTRL |
            //                     |     | LCTRL | LSHIFT | Layer 1 / RET | LALT |    | RGUI |  BSPC   | LAYER 2 / SPACE | LALT |     |
            bindings = <
&kp TAB   &kp Q  &kp W              &kp E                &kp R      &kp T                                                  &z_sz        &u_ue                 &kp I               &o_oe    &kp SEMI       &kp LBKT
&kp ESC   &a_ae  &left_ring LALT S  &left_middy LCTRL D  &kp F      &kp G                                                  &kp H        &right_middy RCTRL K  &right_ring RALT L  &kp L    &kp P          &kp SQT
&kp LGUI  &kp Z  &kp X              &kp C                &kp V      &kp B     &kp DEL    &none          &none    &mo 3     &kp N        &kp M                 &kp COMMA           &kp DOT  &kp LS(COMMA)  &kp RCTRL
                                    &none                &kp LCTRL  &sk_shft  &lt 1 RET  &kp LALT       &kp RGUI &kp BSPC  &lt 2 SPACE  &kp LALT              &none
            >;
        };

        layer_Lower {
            // ---------------------------------------------------------------
            // |  | 1 | 2 | 3 | 4 | 5 |    |  F9  |  F10  | F11 | F12  |  |  |
            // |  | 6 | 7 | 8 | 9 | 0 |    | LEFT | RIGHT | UP  | DOWN |  |  |
            // |  | F | 1 | - | F | 5 |    |      | HOME  | END |      |  |  |
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                         &kp F9   &kp F10  &kp F11    &kp F12    &trans  &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0                                         &kp LEFT &kp DOWN &kp UP     &kp RIGHT  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &trans  &none          &none   &trans  &trans   &kp HOME &kp END    &trans     &trans  &trans
                        &none   &trans  &trans  &trans  &trans         &trans  &trans  &trans   &trans   &none
            >;
        };

        layer_Symbol {
            // ----------------------------------------------------
            // |  | * | : | ; | ! | ? |    | { | } | " | ' | ` |  |
            // |  | \ | / | + | - | = |    | ( | ) | < | > | _ |  |
            // |  | ~ | ^ | & | | | % |    | [ | ] | @ | # | $ |  |
            bindings = <
&none    &kp KP_MULTIPLY   &kp LS(DOT)  &kp LS(COMMA)               &kp LS(N1)  &kp LS(MINUS)                                    &kp LC(LA(N7))  &kp LC(LA(N0))       &kp LS(N2)         &kp LS(BSLH)    &GER_GRAVE   &none
&none  &kp LC(LA(MINUS))  &kp KP_SLASH       &kp RBKT                 &kp FSLH     &kp LS(N0)                                        &kp LS(N8)      &kp LS(N9)  &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp LS(FSLH)   &none
&none   &kp LC(LA(RBKT))    &GER_CARET     &kp LS(N6)  &kp LC(LA(NON_US_BSLH))     &kp LS(N5)  &trans  &none     &none   &trans  &kp LC(LA(N8))  &kp LC(LA(N9))    &kp LC(LA(Q))             &kp BSLH    &kp LS(N4)   &none
                                                &none                   &trans         &trans  &trans  &trans    &trans  &trans          &trans          &trans            &none
            >;
        };

        function_layer {
            // ------------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |RGB_TOG|RGB_BRI|RGB_SAI|RGB_HUI|      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |       |RGB_BRD|RGB_SAD|RGB_HUD|      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |       |       |       |       |      |      |
            //                       |      |      |      |      |      |      |      |      |      |       |       |       |
            bindings = <
&trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2                                  &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &trans  &trans
&trans  &trans  &trans      &bt BT_SEL 3  &bt BT_SEL 4  &trans                                        &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &trans  &trans
&trans  &trans  &trans      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans           &trans           &trans           &trans           &trans  &trans
                            &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans           &trans           &trans
            >;
        };
    };
};
